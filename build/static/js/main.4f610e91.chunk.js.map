{"version":3,"sources":["scenes/Intro.tsx","scenes/CountDown.tsx","scenes/Play.tsx","scenes/Result.tsx","Scene.tsx","reportWebVitals.ts","index.tsx"],"names":["Intro","onClickStart","className","type","value","onClick","CountDown","onCountOvered","useState","countDown","setCountDown","useEffect","setTimeout","Play","count","setCount","score","setScoreState","a","fetch","method","headers","body","JSON","stringify","credentials","then","res","json","data","Result","onClickRetry","ScoreState","postAndGet","map","x","href","Scene","setScore","scene","setScene","finalscore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAOaA,EAAmB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjC,OACE,sBAAKC,UAAU,QAAf,UACE,oFACA,mDAAM,uBAAN,sFACA,uBAAOC,KAAK,SAASC,MAAM,QAAQF,UAAU,QAAQG,QAASJ,QCNvDK,EAAuB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACvBC,mBAAS,GADc,mBAClDC,EADkD,KACvCC,EADuC,KAOzD,OALAC,qBAAU,WACU,IAAdF,GAAmBF,MACtB,CAACE,EAAWF,IAEfK,YAAW,kBAAMF,EAAaD,EAAY,KAAI,KAE5C,6BAAKA,KCPII,EAAkB,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,cAAoB,EACxBC,mBAAS,GADe,mBAC3CM,EAD2C,KACpCC,EADoC,OAEhBP,mBAAS,IAFO,mBAE3CC,EAF2C,KAEhCC,EAFgC,KAOlD,OAJAC,qBAAU,WACY,IAAdF,GAAmBF,EAAcO,MAEzCF,YAAW,kBAAMF,EAAaD,EAAY,KAAI,KAE1C,qCACI,6BAAKA,IACL,6BAAKK,IACL,uBAAOX,KAAK,SAASC,MAAM,OAAOF,UAAU,QAAQG,QAAS,kBAAMU,EAASD,EAAQ,U,mECVhG,WAA0BE,EAAeC,GAAzC,SAAAC,EAAA,sEACUC,MAAM,wBAAyB,CACjCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBR,YAPZ,OAWIG,MAAM,wBAAyB,CAC3BM,YAAa,SAEZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIZ,EAAcY,MAfpC,4C,sBAkBO,IAAMC,EAAoB,SAAC,GAA2B,IAA1Bd,EAAyB,EAAzBA,MAAOe,EAAkB,EAAlBA,aAAkB,EACpBvB,mBAAmB,IADC,mBACjDwB,EADiD,KACrCf,EADqC,KAKxD,OAHAN,qBAAU,Y,sCACNsB,CAAWjB,EAAMC,KAClB,IAEC,qCACI,wCAAWD,KACX,2CACCgB,EAAWE,KAAI,SAAAC,GAAC,OAAI,6BAAKA,OAC1B,uBAAOhC,KAAK,SAASC,MAAM,QAAQF,UAAU,QAAQG,QAAS0B,IAC9D,uBACA,uBACA,mBAAGK,KAAK,kDAAR,gDC9BCC,EAAQ,WAAO,IAAD,EACC7B,mBAAS,GADV,mBAClBQ,EADkB,KACXsB,EADW,OAEC9B,mBAAoB,SAFrB,mBAElB+B,EAFkB,KAEXC,EAFW,KAQzB,OACE,qCACa,UAAVD,GAAqB,cAAC,EAAD,CAAOtC,aAAc,kBAAMuC,EAAS,gBAC/C,cAAVD,GAAyB,cAAC,EAAD,CAAWhC,cAAe,kBAAMiC,EAAS,WACxD,SAAVD,GAAoB,cAAC,EAAD,CAAMhC,cATL,SAACkC,GACzBD,EAAS,UACTF,EAASG,MAQI,WAAVF,GAAsB,cAAC,EAAD,CAAQvB,MAAOA,EAAOe,aAAc,kBAAMS,EAAS,oBCRjEE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4f610e91.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../index.css';\r\n\r\ntype Props = {\r\n  onClickStart: () => void\r\n}\r\n\r\nexport const Intro: FC<Props> = ({ onClickStart }) => {\r\n  return (\r\n    <div className=\"scene\">\r\n      <h1>10秒連打チャレンジ</h1>\r\n      <p>ルール<br />10秒以内にたくさん連打しろ！</p>\r\n      <input type=\"submit\" value=\"START\" className=\"input\" onClick={onClickStart} />\r\n    </div>\r\n  )\r\n}","import { FC, useEffect, useState } from 'react'\r\n\r\ntype Props = {\r\n  onCountOvered: () => void\r\n}\r\n\r\nexport const CountDown: FC<Props> = ({ onCountOvered }) => {\r\n  const [countDown, setCountDown] = useState(3);\r\n  useEffect(() => {\r\n    if (countDown === 0) { onCountOvered() }\r\n  }, [countDown, onCountOvered]\r\n  )\r\n  setTimeout(() => setCountDown(countDown - 1), 1000)\r\n  return (\r\n    <h1>{countDown}</h1>\r\n  )\r\n}","import { FC, useState, useEffect } from 'react'\r\nimport '../index.css'\r\n\r\ntype Props = {\r\n    onCountOvered: (count: number) => void\r\n}\r\n\r\nexport const Play: FC<Props> = ({ onCountOvered }) => {\r\n    const [count, setCount] = useState(0)\r\n    const [countDown, setCountDown] = useState(10);\r\n    useEffect(() => {\r\n        if (countDown === 0) { onCountOvered(count) }\r\n    })\r\n    setTimeout(() => setCountDown(countDown - 1), 1000)\r\n    return (\r\n        <>\r\n            <h1>{countDown}</h1>\r\n            <h2>{count}</h2>\r\n            <input type=\"button\" value=\"PUSH\" className=\"input\" onClick={() => setCount(count + 1)} />\r\n        </>\r\n    )\r\n}","import {FC, useEffect, useState} from 'react'\r\nimport '../index.css'\r\n\r\ntype Props = {\r\n    score: number\r\n    onClickRetry: () => void\r\n}\r\n\r\nasync function postAndGet(score: number, setScoreState: React.Dispatch<React.SetStateAction<number[]>>){\r\n    await fetch(\"http://localhost:3000\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            score\r\n        })\r\n    })\r\n\r\n    fetch(\"http://localhost:3000\", {\r\n        credentials: \"omit\"\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => setScoreState(data))\r\n}\r\n\r\nexport const Result: FC<Props> = ({score, onClickRetry}) => {\r\n    const [ScoreState, setScoreState] = useState<number[]>([])\r\n    useEffect(() => {\r\n        postAndGet(score,setScoreState)\r\n    }, [])\r\n    return (\r\n        <>\r\n            <h1>SCORE:{score}</h1>\r\n            <h1>:RANKING:</h1>\r\n            {ScoreState.map(x => <h1>{x}</h1>)}\r\n            <input type=\"button\" value=\"RETRY\" className=\"input\" onClick={onClickRetry}/>\r\n            <br/>\r\n            <br/>\r\n            <a href=\"https://github.com/NakaYou/ten-second-challenge\">コードだよ</a>\r\n        </>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { Intro } from './scenes/Intro'\r\nimport { CountDown } from './scenes/CountDown'\r\nimport { Play } from './scenes/Play'\r\nimport { Result } from './scenes/Result'\r\n\r\n\r\ntype SceneName = 'intro' | 'countDown' | 'play' | 'result'\r\n\r\nexport const Scene = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [scene, setScene] = useState<SceneName>('intro');\r\n  const handleCountOvered = (finalscore: number) => {\r\n    setScene('result')\r\n    setScore(finalscore)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {scene === 'intro' && <Intro onClickStart={() => setScene('countDown')} />}\r\n      {scene === 'countDown' && <CountDown onCountOvered={() => setScene('play')} />}\r\n      {scene === 'play' && <Play onCountOvered={handleCountOvered} />}\r\n      {scene === 'result' && <Result score={score} onClickRetry={() => setScene('countDown')} />}\r\n    </>\r\n  )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Scene } from './Scene';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Scene />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}